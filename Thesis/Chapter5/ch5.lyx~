#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{enumitem}
\end_preamble
\use_default_options true
\maintain_unincluded_children no
\language american
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008080
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Section
Implementation :
\end_layout

\begin_layout Standard
This chapter outlines the Hexapod’s software architecture and hardware components.
 In the Software Architecture subsection,
 the user-interaction flow is described first,
 followed by the system architecture and its components.
 The Hardware Components subsection then provides a detailed description of the electronics used.
\end_layout

\begin_layout Subsection
Hardware Componets :
\end_layout

\begin_layout Standard
This subsection lists the physical components used in the Hexapod,
 their roles,
 and how they interconnect.
\end_layout

\begin_layout Subsubsection
Actuators :
\end_layout

\begin_layout Standard
(insert picture here)
\end_layout

\begin_layout Standard
During the Feasibility Study we found the GIM 8115-9 servo motors to be suitable.
 So we use 6 motors in total,
 one for each axis.
 This motor operates at 36 Volt DC and receives commands over CAN Bus at 500 Kilo Byte/second rate.
 It has three modes of operation:Torque control,
 Velocity Control and Position Control.
 We decided to use the velocity control mode with our own PD position controller as outer loop,
 as it increases the position control bandwidth.
 The details for this decision are explained in the control systems section.
 The motor driver also has feature for enabling or disabling the power stage based on CAN bus commands.
 For each command sent to the motor driver,
 it replies with an ACK/NAK packet for indicating succes or failure.
 Each feedback packet contains relevant information.
 For an example,
 whenever any control comamnd is sent,
 the driver replies with the current shaft position,
 velocity,
 applied torque and the temp of the motor coils.
 For enable and disable command,
 it sends back a simple ACK / NAK.
\end_layout

\begin_layout Subsubsection
Microcontrollers :
\end_layout

\begin_layout Standard
(insert picture here)
\end_layout

\begin_layout Standard
We used 4 Teensy 4.1 microcontroller for this project.
 This choice was based on the following reasons.
 The GIM 8115-9 motor's driver commonicates over CAN bus at 500KBPS.
 The manufacturer specified protocol uses 8 bytes for each command and feedback.
 According to CAN 2.0 framing standard,
 this results in a payload 8 byte or 64 bits to blow up to 130 bits in the worst case.
 At 500 KBPS,
 this takes about 260 microsecsonds to transmit the command and same amount of time to receive the feedback.
 As a result total round trip time takes 560 microseconds.
 Therefore to maintain a sampling time of 1 ms,
 we can not have more than one motor per bus.
 The Teensy 4.1 microcontroller has 2 CAN 2.0 ports,
 but it requires an external electrical interface.
 Thus we chose to use 3 Teensy 4.1 microcontroller (slave microcontroller) to communicate with the 6 actuators.
 To maintain synchronization,
 we use another Teensy 4.1(master microcontroller).
 The Teensy 4.1 has 1MB or primary RAM and 16 MB of secondary RAM onboard.
 The master microcontroller holds the trajectory information on the secondary RAM.
 It also acts as USB host to send data over USB serial to the secondary microcontroller,
 while the master itself receives command over USB serial from a host computer.
\end_layout

\begin_layout Subsubsection
CAN Transceiver :
\end_layout

\begin_layout Standard
(insert picture here)
\end_layout

\begin_layout Standard
We use the SN65HVD230 CAN Board as CAN transceiver.
 It can handle CAN data rates of up-to 1Mbit/s.
 It also offers ESD protection.
\end_layout

\begin_layout Subsection
System Architecture :
\end_layout

\begin_layout Standard
The Hexapod consists of 3 main subsystems.
 They are :
 The host PC application,
 The master microcontroller and the slave microcontroller.
 They are explained in details below:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename SystemArchitecture.svg
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
System architecture
\end_layout

\end_inset

System architecture
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The Python Application :
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment center
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename UI.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
GUI
\end_layout

\end_inset

GUI
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:GUI"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Hexapod is controlled by a host PC using graphical user interface (GUI) application written in Python.
 To operate,
 the user selects the COM port from the drop-down menu (filtered by vendor ID and product ID to show only Teensy 4.1 microcontrollers) and clicks Connect.
 Once the connection is established,
 the Connect button turns green.
\end_layout

\begin_layout Standard
Next,
 the user clicks Enable,
 which sends a command to the motor drivers to power the motors and if it’s a cold start,
 runs the calibration procedures.
 The user then clicks Upload,
 which opens a file-selection dialog.
 From there,
 they navigate on the host PC to choose a motion profile file (in .txt,
 .csv or Excel format) containing seven rows of data:
 time,
 x,
 y,
 z,
 roll,
 pitch and yaw.
\end_layout

\begin_layout Standard
After selection,
 the application checks data integrity,
 passes the data through an inverse kinematics (IK) block to check for singularities.
 If the trajectory is validated,
 the resulting motor motion profile is uploaded to the RAM of the Teensy 4.1 micro-controller.
 With a maximum trajectory size of 8 MB at 1 kHz sampling rate,
 this supports non-cyclic trajectories up to ≈ 5 hours 49 minutes,
 or cyclic trajectories of any length.
\end_layout

\begin_layout Standard
Once uploaded,
 the system moves the Hexapod to the trajectory’s start position.
 The user clicks Play to begin execution;
 playback speed is ramped up slowly to prevent acceleration spikes.
 Pause momentarily interrupts execution (resumable via Play),
 and Stop halts it entirely.
\end_layout

\begin_layout Standard
A EStop button provides software-based motor disarming,
 while a physical Stop button cuts power completely.
 A Reset button in the GUI clears any error states.
 When execution finishes—
signaled by the user pressing Play and Stop a log file is generated automatically.
 This file also records timestamped user inputs and motor-driver feedback (timestamp,
 position,
 velocity,
 torque and motor temperature) at a 1 kHz sampling rate.
\end_layout

\begin_layout Standard
A finite state machine governs the user interaction as every user event.
 The GUI sends transition request to the Hexapod and if the transition is successful,
 the GUI is updated to show user the next available transitions.
 The state machine makes sure all events happens in the intended sequence.
\end_layout

\begin_layout Subsubsection
The Master Microcontroller :
\end_layout

\begin_layout Standard
The operation of the system is governed by a finite state machine running on the master microcontroller.
 It receives transition requests from the host PC applicaiton and based on the request type,
 sends the response itself,
 or relays the message to the salve microcontroller for response.The master microcontroller acts as source of ground truth for the other subsystems.
 It runs the At system startup and at every state change,
 the new state is broadcasted to the host PC and the slave microcontrollers.
 The diagram of the state machine is shown below :
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename FSMFULL.drawio.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
GUI Finite State Machine
\end_layout

\end_inset

GUI Finite State Machine
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:FSM"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It has the following states :
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

IDLE,
 DISCONNECTED,
 CONNECTED,
 READY,
 STOPPED,
 PLAYING,
 PAUSED,
 ERROR.
\end_layout

\end_inset

 The resulting action of each transition is explained below :
\end_layout

\begin_layout Subparagraph
Connect :
 
\end_layout

\begin_layout Standard
This transition is triggered when the master microcontroller detects a connection with host computer over USB serial.
\end_layout

\begin_layout Subparagraph
Disconnect :
 
\end_layout

\begin_layout Standard
This transition is triggered when the master microcontroller loses connection with the host computer.
\end_layout

\begin_layout Subparagraph*
Enable :
 
\end_layout

\begin_layout Standard
Upon receiving this transition request,
 the master microcontroller sends a request to the slave microcontrollers to send an enable command to the motor drivers,
 the motor driver feedback is then relayed back to the master microcontroller,
 which completes the transition.
\end_layout

\begin_layout Subparagraph*
Disable/ Estop :
 
\end_layout

\begin_layout Standard
Upon receiving this transition request,
 the master microcontroller sends a request to the slave microcontrollers to send an disable command to the motor drivers,
 the motor driver feedback is then relayed back to the master microcontroller,
 which completes the transition.
\end_layout

\begin_layout Subparagraph
Upload :
 
\end_layout

\begin_layout Standard
Receives trajectory data streamed through the USB connection to the secondary RAM.
 Moves the platform to the first sample in the trajectory.
\end_layout

\begin_layout Subparagraph
Play :
\end_layout

\begin_layout Standard
Start sending the trajectory information ans position commands.
 Starts gradually in order to avoid acceleration spikes st sudden start.
\end_layout

\begin_layout Subparagraph
Pause :
\end_layout

\begin_layout Standard
Halt the progression through the trajectory,
 slowly.
\end_layout

\begin_layout Subparagraph
Stop :
\end_layout

\begin_layout Standard
Delete the trajectory data in RAM and move the platform to stow position.
\end_layout

\begin_layout Subparagraph
Reset :
 
\end_layout

\begin_layout Standard
Reset all the microcontroller to clear errors.
\end_layout

\begin_layout Standard
(insert flowchart and explain the smooth startup here).
\end_layout

\begin_layout Subsubsection
The Slave Microcontroller :
\end_layout

\begin_layout Standard
The slave receives commands over USB serial.
 The commands it receives are :
 Enable,
 Disable or move to a certain position.
 It also runs a discrete PD controller at 1KHz sample time.
 Upon receiving a command over USB,
 it translates the commands into appopriate commands for the motor driver and sends that data over CAN bus and upon receiving feedback from the motor drivers constructs a response packet and sends it back to the master microcontroller.
 
\end_layout

\begin_layout Subsubsection
Communication Protocol:
\end_layout

\begin_layout Standard
Inter-device communication is done via a custom binary framing protocol that has a fixed 16-byte header/footer overhead.
 As summarized in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Table Packet"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 each packet consists of:
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
alignment center
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Byte Index
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Length
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Field
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
1 byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Start Marker(0x01)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
1 – 4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
4 bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Packet Length(N)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
5 – 8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
4 bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Sequence Number
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
1 byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Sender ID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
1 byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Receiver ID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
11 – (11 + N − 1)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
N bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
Payload
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
(11 + N) – (14 + N)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
4 bytes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
CRC32
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
15 + N
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
1 byte
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\nospellcheck off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
End Marker(0x04)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Packet Structure
\end_layout

\end_inset

Packet Structure
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:Table Packet"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
When operating at USB 2.0 high-speed (480 Mb/s),
 the Teensy 4.1’s on-chip USB controller provides a 1024-byte FIFO buffer.
 In the present application,
 each packet is constrained to a total length of 256 bytes maximum,
 including the 16 bytes of framing overhead.This design ensures that up to four back-to-back packets may reside in the FIFO simultaneously,
 thus preserving continuous high-throughput operation without risk of overflow.
\end_layout

\end_body
\end_document
